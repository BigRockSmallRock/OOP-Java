SingleLink Data Structures Tests

Tests are of the form:
  Test Operation {expected value}: actual value
  Contents: [contents from front to rear]

================================================================================
Testing SingleStack
----------------------------------------
SingleStack<Integer> source = new SingleStack<>();
  isEmpty {true}: true
----------------------------------------
Push values: [45, 19, 45, 40, 44, 44, 21]
  push: 45
  push: 19
  push: 45
  push: 40
  push: 44
  push: 44
  push: 21
  isEmpty {false}: false
  peek {21}: 21
  Contents: [21, 44, 44, 40, 45, 19, 45]
----------------------------------------
source.splitAlternate(left, right)
source
  isEmpty {true}: true
  Contents: []
left
  isEmpty {false}: false
  peek {45}: 45
  Contents: [45, 45, 44, 21]
right
  isEmpty {false}: false
  peek {19}: 19
  Contents: [19, 40, 44]
----------------------------------------
target.combine(left, right)
target
  isEmpty {false}: false
  peek {21}: 21
  Contents: [21, 44, 44, 40, 45, 19, 45]
left
  isEmpty {true}: true
  Contents: []
right
  isEmpty {true}: true
  Contents: []
----------------------------------------
Clear target
  Pop {21}: 21
  Pop {44}: 44
  Pop {44}: 44
  Pop {40}: 40
  Pop {45}: 45
  Pop {19}: 19
  Pop {45}: 45

================================================================================
Testing SingleQueue
----------------------------------------
SingleQueue<Integer> source = new SingleQueue<>();
  isEmpty {true}: true
----------------------------------------
Insert values: [16, 19, 13, 30, 25, 49, 7]
  insert: 16
  insert: 19
  insert: 13
  insert: 30
  insert: 25
  insert: 49
  insert: 7
  isEmpty {false}: false
  peek {16}: 16
  Contents: [16, 19, 13, 30, 25, 49, 7]
----------------------------------------
source.splitAlternate(left, right)
source
  isEmpty {true}: true
  Contents: []
left
  isEmpty {false}: false
  peek {16}: 16
  Contents: [16, 13, 25, 7]
right
  isEmpty {false}: false
  peek {19}: 19
  Contents: [19, 30, 49]
----------------------------------------
target.combine(left, right)
target
  isEmpty {false}: false
  peek {16}: 16
  Contents: [16, 19, 13, 30, 25, 49, 7]
left
  isEmpty {true}: true
  Contents: []
right
  isEmpty {true}: true
  Contents: []
----------------------------------------
Clear target
  remove {16}: 16
  remove {19}: 19
  remove {13}: 13
  remove {30}: 30
  remove {25}: 25
  remove {49}: 49
  remove {7}: 7

================================================================================
Testing SinglePriorityQueue
----------------------------------------
SinglePriorityQueue<Integer> source = new SinglePriorityQueue<>();
  isEmpty {true}: true
----------------------------------------
Insert values: [22, 27, 32, 37, 3, 26, 0]
  insert: 22
  insert: 27
  insert: 32
  insert: 37
  insert: 3
  insert: 26
  insert: 0
  isEmpty {false}: false
  peek {0}: 0
  Contents: [0, 3, 22, 26, 27, 32, 37]
----------------------------------------
source.splitByKey(26, left, right)
source
  isEmpty {true}: true
  Contents: []
left
  isEmpty {false}: false
  peek {0}: 0
  Contents: [0, 3, 22]
right
  isEmpty {false}: false
  peek {26}: 26
  Contents: [26, 27, 32, 37]
----------------------------------------
target.combine(left, right)
target
  isEmpty {false}: false
  peek {0}: 0
  Contents: [0, 3, 22, 26, 27, 32, 37]
left
  isEmpty {true}: true
  Contents: []
right
  isEmpty {true}: true
  Contents: []
----------------------------------------
Clear target
  remove {0}: 0
  remove {3}: 3
  remove {22}: 22
  remove {26}: 26
  remove {27}: 27
  remove {32}: 32
  remove {37}: 37

================================================================================
Testing SingleList
----------------------------------------
SingleList<Integer> source = new SingleList<>();
  isEmpty {true}: true
----------------------------------------
Append values: [41, 48]
  append: 41
  append: 48
  isEmpty {false}: false
  peek {41}: 41
  Contents: [41, 48]
----------------------------------------
prepend: 33
  isEmpty {false}: false
  peek {33}: 33
  Contents: [33, 41, 48]
----------------------------------------
Insert values: [41, 48]
  insert: (1, 29)
  insert: (2, 42)
  insert: (3, 8)
  insert: (4, 41)
  isEmpty {false}: false
  peek {33}: 33
  Contents: [33, 29, 42, 8, 41, 41, 48]
----------------------------------------
contains 999 {false}: false
contains 8 {true}: true
----------------------------------------
find 999 {null}: 
find 8 {8}: 8
----------------------------------------
get 3 {8}: 8
----------------------------------------
index 8 {3}: 3
index 999 {-1}: -1
----------------------------------------
max {48}: 48
min {8}: 8
----------------------------------------
Contents: [33, 29, 42, 8, 41, 41, 48]
  count 999 {0}: 0
Contents: [75, 75, 75, 75, 75, 75, 75]
  count 75 {7}: 7
----------------------------------------
Contents: [75, 75, 75, 75, 75, 75, 75]
  clean {[75]}: [75]
----------------------------------------
Contents: [75, 75, 75, 75, 75, 75, 75]
  removeMany 999 {[75, 75, 75, 75, 75, 75, 75]}: [75, 75, 75, 75, 75, 75, 75]
  removeMany 75 {[]}: []
----------------------------------------
Contents: [33, 29, 42, 8, 41, 41, 48]
  removeFront {33}: 33
----------------------------------------
Contents: [29, 42, 8, 41, 41, 48]
  remove 999 {null}: null
  remove 48 {48}: 48
Contents: [29, 42, 8, 41, 41]
----------------------------------------
Contents: [33, 29, 42, 8, 41, 41, 48]
  reverse {[48, 41, 41, 8, 42, 29, 33]}: [48, 41, 41, 8, 42, 29, 33]
----------------------------------------
Contents: [33, 29, 42, 8, 41, 41, 48]
  split {[33, 29, 42, 8], [41, 41, 48]}: [33, 29, 42, 8], [41, 41, 48]
----------------------------------------
Contents: [33, 29, 42, 8, 41, 41, 48]
  splitAlternate {[33, 42, 41, 48], [29, 8, 41]}: [33, 42, 41, 48], [29, 8, 41]
----------------------------------------
Contents: [33, 42, 41, 48], [29, 8, 41]
  combine {[33, 29, 42, 8, 41, 41, 48]}: [33, 29, 42, 8, 41, 41, 48]
----------------------------------------
Contents: [], []
  identical {true}: true
Contents: [33, 29, 42, 8, 41, 41, 48], [33, 29, 42, 8, 41, 41, 48]
  identical {true}: true
Contents: [33, 29, 42, 8, 41, 41, 48], [8, 29, 33, 41, 41, 42, 48]
  identical {false}: false
----------------------------------------
Contents: [4, 0, 2, 6, 5, 1, 3], [0, 3, 6, 1, 2, 5, 4]
  intersection {[4, 0, 2, 6, 5, 1, 3]}: [4, 0, 2, 6, 5, 1, 3]
Contents: [4, 0, 2, 6, 5, 1, 3], [999]
  intersection {[]}: []
----------------------------------------
Contents: [4, 0, 2], [6, 5, 1, 3]
  union {[4, 0, 2, 6, 5, 1, 3]}: [4, 0, 2, 6, 5, 1, 3]
----------------------------------------
SingleList<String> characters = new SingleList<>();
  append: CP213
  append: David
  append: Laurier
  append: covid
  Contents: [CP213, David, Laurier, covid]